/* CJ Controlled Japanese 文法 */

/**
* トップの規則
* 文は Chunk の繰り返しとみなす
* @ 表現される　クリックする 分かち書き
*/

Sentence = {
    (Chunk IGNORED?)* EOS
    #CJ
}

IGNORED = ('ください' / 'です' / 'でした')
EOS = [。．.\n]? EOF

Chunk =
  / { CONJ #Conjunction } TEN
  / {TEN #Ten }
  / Character
  / Pattern
  / Parenthesis _Noun?
  / { [。．.\n] #EOS}
  / Expression _ _Noun?
  / Unknown

/* Parenthesis */

Parenthesis = 
  / { '「' { (!'」' .)* }  '」' #SNoun }
  / { [(（] { (![)）] .)* } [)）] #SNoun }
  / { '『' { (!'』' .)* } '』' #SNoun }
  / { '【' { (!'】' .)* } '】' #SNoun }
  / { '《' { (!'》' .)* } '》' #SNoun }
  / { '[[' { (!']]' .)* } ']]' #SNoun }
  / { '{{' { (!'}}' .)* } '}}'#SNoun }
  / { '&quot;' { (!'&quot;' .)* } '&quot;' #SNoun }


// 接続詞, 連体詞, 副詞

CONJ = @choice('cjdic/CONJ.txt', 'CJDIC/CONJ.txt')

/* Character */

Character =
    / { CVERB1 #Verb1 } _Verb1
    / { D CADJ #Adj} _Adjective
    / { [死し] #VN5 } _VerbNA5

CVERB1 = [鋳診観視見経簸着看獲煮流歴恐得干居射寝割似出ゐれみへひねにでてせきえうい] &__HVERB1w
CADJ = [黒高青難長鋭鈍重醜酸酷遠遍遅速近辛軽赤賢貴豪角薄蒼著荒苦若良臭腥脆聰聡羨繁緩細紅粘粗篤穢稚硬短眩眠白痛痒疎異畏甘狭狡熱煩煙無濃潔温渋清深淡浅洽汚永暗暑普易明早旨旧敏拙懶懈憎憂惨悪恥恐怪怖快強弱弛広幽幼少尊寒安好太多堆堅固善吝古厚凄円儚偉佳低乏丸イよぽなすこくえうい]

// @@ 用いられる

K = KANJI/KATA
H = HIRA
C = KANJI/HIRA/KATA
D = (!(CADJ HPADJc) K)*
HEAD = (C D*)

//HEAD1 = K* H1? H1? 
H1 = (NH1 !(PVERB1c __HVERB1w) H)
NH1 = !([かさたなまらわぐば] 'れ') !'でき'   // この並びは五段活用

K1 = (!KSTART K)
KSTART = K (_HVERBw / H _HVERBw)

/* Pattern */

// 書く　赤く が区別できない
Pattern =
    / { C K* (!HADJPAT H)* HADJPAT &HPADJc #PAdj } _Adjective
    / { K* H1? H1? H1? PVERB1c &__HVERB1w #PVerb1 } (_AmVerb1 / _Verb1)
    / { K K1* #Noun } ( _Verb　/ _Noun / EOF)
    / { HEAD (!HPADJw H)* #PPAdj } _Adjective
    / { #Empty } (_NounVerb / _Noun)
    / { HEAD (!_HVERBw H)? #PNoun } _Verb
    / { HEAD (!_HVERBw H)* #PPNoun } _Verb
    / { HEAD (!POSTNOUN H)* #PPNoun } (_Verb/_Noun?)

/* 形容詞のパターン */

// 素人くさい あぶらっこい　つめたい
HADJPAT = 'し' / 'っぽ' / 'ぼった' / 'っこ' / 'た'
HPADJc = [さげめくいか]
HPADJw = 
    / 'い' !__HVERBT _PSURU
    / 'く' ( [てなすし] )  // 大きくなる, 大きくする, 大きくして
    / 'さ' !'れ' ( POSTNOUNc / POSTNOUNw / EOF )
    / 'め' ( POSTNOUNc / POSTNOUNw / PVERB1w / EOF )
    / 'かった'
    / 'そう'
    / 'すぎ'


_PSURU = PSURUc / PSURUw / KANJI / EOF


POSTNOUN = POSTNOUNVERBw / POSTNOUNw / POSTNOUNc

POSTNOUNVERBw =
  / 'し' !'い' (PNAIw / 'ま' / 'て' / 'ろ')
  / 'する'
  / 'すれば'

POSTNOUNc = [はがもをのなだでとにへ] !'ん'

POSTNOUNw =
    / 'より'
    / 'まで'
    / 'か' ('どうか' / '否か' / 'ら' / 'ぎり')
    / 'のみ'
    / 'ばかり'
    / 'さえ'
    / 'し' ('か' / PNAIw)
    / 'する'
    / 'こそ'

PSURUw = // 赤い
    / 'な' ('ど' / 'らば')
    / 'ため'
    / 'とも'
    / 'で' ('しょう' / 'す')
    / 'の' ('は' / 'を')
    / 'に' ('は' / 'も' / 'つれて')
    / 'か' ('も' / 'の' / 'に' / 'を')

PSURUc = [なとか] // 赤い

PNAIw = 
  / 'ない'
  / 'なく'
  / 'なかった'
  / 'なければ'

_HVERBw = 
  / 'し' !'い' (__HVERBI / __HVERBT / PNAIw / 'よ' )
  / 'せず' // VS 行動せず  探さず
  / 'する' / 'すれば'  // VS
  / 'せよ' // VS, VS5 
  / [いっ] __HVERBT // VK5, VW5
  / 'ん' __HVERBD // VN5,VM5,
  / 'か' __HVERBA // カ行
  / 'き' __HVERBI
  / 'く' !(PNAIw/'なる'/[すし]) __HVERBU   // 赤くとの衝突
  / 'け' __HVERBE
  / 'こ' __HVERBO
  / 'さ' __HVERBA
  / 'す' __HVERBU
  / 'せ' __HVERBE
  / 'そ' __HVERBO
  / 'た' __HVERBA  // た行
  / 'ち' __HVERBI
  / 'つ' __HVERBU
  / 'て' __HVERBE
  / 'と' __HVERBO
  / 'ま' __HVERBA
  / 'み' __HVERBI
  / 'む' __HVERBU
  / 'め' __HVERBE
  / 'も' __HVERBO
  / 'ら' __HVERBA
  / 'り' __HVERBI
  / 'る' __HVERBU
  / 'れ' __HVERBE
  / 'ろ' __HVERBO
  / 'わ' __HVERBA
  / 'う' __HVERBU
  / 'え' !__HVERB1w __HVERBE
  / 'お' __HVERBO
  / 'ば' __HVERBA
  / 'び' __HVERBI
  / 'ぶ' __HVERBU
  / 'べ' __HVERBE
  / 'ぼ' __HVERBO

PVERB1w = PVERB1c __HVERB1w
PVERB1c = [いえきぎけげじせてめびべりれね]
__HVERB1w =  // 高めた 落ちる　(勝ちますと区別つかない)
  / 'る'  
  / 'た' // 
  / 'て'
  / 'られ'
  / PNAIw
  / 'ま' // せん


__HVERBA = PNAIw / 'れ' / 'さ' / 'ず'
__HVERBI = 'ま' / 'やす' / 'にく' / 'つつ' / K
__HVERBT = 'た' / 'て'
__HVERBD = 'だ' / 'で'
__HVERBU = K / PSURUc / PSURUw / EOF
__HVERBE = 'ば' / 'と' / [！!] / EOF
__HVERBO = 'う'

Unknown = {
    (!K .)+
    #err
}

/* _Adjective */

_Adjective =
    / {^ '過ぎ' / 'すぎ' #Verb1 } _Verb1
    / {^ 'さ' !'れ' #Noun } _Noun?
    / {^ 'そう' #Noun } _Noun? 
    / {^ 'め' #Noun } _Verb1
    / {^ 'かった' #Past } _Past
    / _MoodNA 

_MoodNA = //な 白 美し
    / {^ 'い' #Base } ({^ 'で' #And} / _Base)?
    / {^ 'かった' #Past } _Past?
    / {^ 'ければ' #If }
    / {^ 'くな' #Not } _MoodNA
    / {^ 'くな' #Become } _VerbRA5
    / {^ 'くて' #Noun } _Noun // なくてはいけません
    / {^ 'くすべき' #Should } _Noun? // なくすべき
    / 'く' _NounVerb  // なく
    / {^ 'く' &[はもを] #Noun } _Noun // 大きくはない、大きくはありません
    / {^ 'くに' #Adverb }
    / {^ 'くても' #EvenIf }
    / {^ 'く' 'て'? #And }
    / {^ 'さ' #Noun } _Noun?

/* _Noun */

That = {
  'と' 'も'? #That
}

_Noun = 
  / {^ NOUNTAIL #Noun } _Noun
  / {^ 'でした' / 'だった' #VB }　{^ #Past } 
  / {^ 'でしょう' / 'だろう' #VB }　{^ #Would } 
  / {^ 'です' / 'だ' #VB }
  / {^ ARGU #Argument }
  / {^ 'な' !('っ'/ 'し'/'い'/'く') #AdjN}

NOUNTAIL =
  / '置き' / 'おき' // 1日おき
  / 'ごと' 
  / 'さま' / 'さん' / 'ちゃん'
  / 'たち' 
  / 'ずくめ' / 'だらけ' / 'ばかり'
  / 'など' / 'がら'
  / 'さ' ![せれ]

ARGU = 
  / [はがものをや]
  / 'に' ('ついて'/'関して'/'より'/ 'よって')?　OF
  / 'と' OF
  / 'で' 'は'? OF
  / 'の' (('よう'/'とおり'/'通り') 'に'?)?
  / 'から' OF
  / 'より' OF
  / 'まで' OF
  / 'へ' OF
  / 'か' ('どうか' / '否か' / 'ら' / 'ぎり')? OF
  / 'だけ' OF
  / 'のみ' OF
  / 'ばかり' OF
  / 'さえ' OF
  / 'し' ('か' / PNAIw)
  / 'こそ' OF
  / 'なら' (('ば'/'では') OF)?

OF = ('の' / MO / 'を' / 'に')?

MO = !('もっと'/'もう'/'もし') 'も'

_NounVerb = // 例. 行動する 論じる
  / _VerbVS 
  / _VerbVZ

_AmVerb1 = // 情けない　決めない @not @adj
    / {^ 'な' #NotOrAdj } _MoodNA

_Verb1 = // 過ぎ　述べ　視　でき
    / {^ 'る' #Verb } _VerbU  // 
    / {^ 'れ' #Verb } _VerbE  // ば
    / {^ 'られ' #Been } _Verb1 // 述べられています
    / {^ 'よ' #Verb } _VerbO  // う
    / _VerbA  // ない
    / _VerbT // て
    / _VerbI　// て

_VerbNA5 = // 切
    / {^ 'な' #VR5 } _VerbA  // ない
    / {^ 'に' #VR5 } _VerbI  // ながら
    / {^ 'に' #VR5 } _Noun?
    / {^ 'ん' #VR5 } _VerbD // て
    / {^ 'ぬ' #VR5 } _VerbU  // 
    / {^ 'ね' #VR5 } _VerbE  // ば
    / {^ 'の' #VR5 } _VerbO  // う

_VerbRA5 = // 切
    / {^ 'ら' #VR5 } _VerbA  // ない
    / {^ 'り' #VR5 } _VerbI  // ながら
    / {^ 'り' #VR5 } _Noun?
    / {^ 'っ' #VR5 } _VerbT // て
    / {^ 'る' #VR5 } _VerbU  // 
    / {^ 'れ' #VR5 } _VerbE  // ば
    / {^ 'ろ' #VR5 } _VerbO  // う

_Verb = 
    / {^ 'い' #Vi5 } _VerbT // #VK5@　#VW5@ #VG5@　た
    / {^ 'っ' #Vt5 } _VerbT // #VT5@ #VR5@ #VW5@ た
    / {^ 'ん' #Vd5 } _VerbD // #VN5@ #VM5@ #VB5@
    / {^ 'か' #VK5 } _VerbA // 書
    / {^ 'き' #VK5 } _VerbI
    / {^ 'き' #Noun } _Noun?
    / {^ 'く' #VK5 } _VerbU
    / {^ 'け' #VK5 } _VerbE
    / {^ 'こ' #VK5 } _VerbO
    / {^ 'さ' #VS5 } _VerbA  // ない
    / {^ 'し' #Noun } _Noun?
    / {^ 'す' #VS5 } _VerbU  // 達すと
    / {^ 'せ' #VS5 } _VerbE  // ば
    / {^ 'そ' #VS5 } _VerbO  // う
    / {^ 'た' #VT5 } _VerbA  // ない
    / {^ 'ち' #VT5 } _VerbI   // ながら
    / {^ 'ち' #VT5 } _Noun?
    / {^ 'つ' #VT5 } _VerbU  // 
    / {^ 'て' #VT5 } _VerbE  // ば
    / {^ 'と' #VT5 } _VerbO  // う
    / {^ 'ま' #VM5 } _VerbA  // ない
    / {^ 'み' #VM5 } _VerbI // ながら
    / {^ 'み' #Noun } _Noun?
    / {^ 'む' #VM5 } _VerbU  // 
    / {^ 'め' #VM5 } _VerbE  // ば
    / {^ 'も' #VM5 } _VerbO  // う
    / {^ 'ら' #VR5 } _VerbA  // ない
    / {^ 'り' #VR5 } _VerbI  // ながら
    / {^ 'り' #Noun } _Noun?
    / {^ 'る' #VR5 } _VerbU  // 
    / {^ 'れ' #VR5 } _VerbE  // ば
    / {^ 'ろ' #VR5 } _VerbO  // う
    / {^ 'わ' #VW5 } _VerbA  // ない
    / {^ 'い' #Noun } _Noun?
    / {^ 'う' #VW5 } _VerbU  // 
    / {^ 'え' #VW5 } _VerbE  // ば
    / {^ 'お' #VW5 } _VerbO  // う
    / {^ 'が' #VG5 } _VerbA  // ない
    / {^ 'ぎ' #VG5 } _VerbI  // ながら
    / {^ 'ぎ' #Noun } _Noun?
    / {^ 'ぐ' #VG5 } _VerbU  // 
    / {^ 'げ' #VG5 } _VerbE  // ば
    / {^ 'ご' #VG5 } _VerbO  // う
    / {^ 'ば' #VB5 } _VerbA  // ない
    / {^ 'び' #VB5 } _VerbI 　// ながら
    / {^ 'び' #Noun } _Noun?   //　+ 名詞
    / {^ 'ぶ' #VB5 } _VerbU  // 
    / {^ 'べ' #VB5 } _VerbE  // ば
    / {^ 'ぼ' #VB5 } _VerbO  // う
    / _VerbVZ

_VerbVS = 
    / {^ 'する' #VS } _VerbU  // サ変
    / {^ 'す' #VS } ('れ' _VerbE / _Should) 
    / {^ 'しよ' #VS } _VerbO
    / {^ 'し' #VS } _VerbA
    / {^ 'し' #VSx } (_VerbT / _VerbI / ![かい] _Noun?)  // 彼しか おいしい
    / {^ 'さ' &'れ' #VS } {'れ' #Been } _Verb1 
    / {^ 'さ' &'せ' #VS } {'せ' #Make } _Verb1
    / {^ 'せよ' #VS } {^ CMD? #Command } _Base?
    / {^ 'せず' / 'せぬ' #Noun } _Noun?
    / {^ 'でき' #Can } _Verb1 

_VerbVZ = 
    / {^ 'ずる' #VZ } _VerbU  // サ変
    / {^ 'ず' #VZ } ('れ' _VerbE / _Should) 
    / {^ 'じよ' #VZ } _VerbO
    / {^ 'じ' #VZ } _VerbA
    / {^ 'じ' #VZ } (_VerbT / _VerbI / !'か' _Noun?)
    / {^ 'じさ' &'れ' #VZ } {'れ' #Been } _Verb1 
    / {^ 'じさ' &'せ' #VZ } {'せ' #Make } _Verb1
    / {^ 'ぜよ' #VZ } {^ CMD? #Command } _Base?
    / {^ 'ぜず' / 'ぜぬ' #Noun } _Noun?

_VerbA = // 書か+ない   探さ+ない
    / {^ 'な' #Not } _MoodNA
    / {^ 'ず' #Noun } _Noun?
    / {^ 'さ'? 'せ' #Make } _Verb1
    / {^ 'れ' #Been } _Verb1 

_VerbI = // 書き+つつ  探し+つつ　
    / &'ま' _VerbIPolite
    / {^ 'た' #Want } _MoodNA   // 書きたい
    / {^ ('やす' / 'よ' ) #Easy } _MoodNA  // 書きやすい
    / {^ ('にく' / 'がた' / 'づら') #Hard } _MoodNA //書きがたい
    / {^ 'がち' #Noun } _Noun? //休みがちだ
    / {^ ('つつ' / 'ながら') #While }
    / &TEN

_VerbIPolite =
    / {^ ('ます' / 'ましょう') #Base } _Polite _Base?
    / {^ 'ません' #Not } _Polite _Base?
    / {^ 'ましたら' #If } _Polite
    / {^ 'ました' #Past } _Polite _Past?
    / {^ 'ましても' #EvenIf } _Polite
    / {^ 'まして' #And } _Polite

_Polite = {^ #Polite }

_VerbT = // 書い+て   探し+て　
    / {^ 'た' NH #Want } _MoodNA   // 特例. 記録したい
    / {^ 'た' #Past } _Past?
    / {^ 'てから' #After } _Noun?
    / {^ 'て' (&'も' NH .) #EvenIf }
    / {^ 'て' #Noun } _Noun
    / {^ 'て' #And } _TryMood?

_VerbD = // 遊んだ   遊んで
    / {^ 'だ' #Past } _Past?
    / {^ 'でから' #After } _Noun?
    / {^ 'で' (&'も' NH .) #EvenIf }
    / {^ 'で' #Noun } _Noun
    / {^ 'で' IGNORED? #And } _TryMood?

_VerbU = _Base? // 書く　探す

_VerbE = // 書け+ば  探せ+ば
    / {^ 'ば' #If }
    / {^ #Can } _Verb1
    / {^ CMD? #Command }

_VerbO = // 書こ+う　探そ+う
    / {^ 'う' #Will } _Base?

_Should = 
    {^ ('べき' / 'べし' / 'はず' ) #Should } _Noun?

_Base =
  / {^ 'かも' ([知し] 'れ' ('ない' / 'ません'))? #May } _Base?
  / {^ 'に' ('違い'/'ちがい') ('ない' / 'ありません') #Must } _Base?
  / {^ 'だろう' / 'でしょう' #Would } _Base?
  / {^ 'らし' #Sound } _MoodNA   // するらしい
  / {^ 'しかありません' #Only }
  / {^ 'が' #Conjunction }
  / { 'けれども' #Conjunction } // けれども
  / { 'のみ'/ 'だけ' #That } _Noun?
  / { 'ため' / '為' / 'から' #Because } _Noun?
  / { 'こと' / 'の'　#That } _Noun?

_Past = // した
    / {^ 'り' #Noun } (_NounVerb / _Noun)
    / {^ 'り' 'し'? #Then }
    / {^ 'な'? 'ら' 'ば'? #If } 
    / _Base

NH = ''

_TryMood =
    / {^ 'み' #Try } _Verb1 // 笑ってみる
    // / {^ 'い' #Going } _VerbKA5  // 
    // / {^ 'い' #Now } _Verb1    // 笑っている, 増加していく
    // / {^ 'くれ' #Given } _Verb1    // 笑ってくれる
    // / {^ 'お' #Done } _VerbKA5    // 笑っておく
    // / _Exist                 // 笑ってある 
    // / Come                  // 笑ってくる
    // / {^ &HIRA #Now } _Verb1    // 笑ってる (口語)

/* Expression */

Expression = {
  Operator
  #Expression
} _

Operator =
	AndExpr (left:^ { OR _ right: AndExpr #Or })*

OR = 'or' !W / '||' / '｜｜' / 'かつ' 

AndExpr =
	NotExpr (left:^ { AND _ right: NotExpr #And })*

AND = 'and' !W / '&&' / '＆＆' / 'または'

NotExpr =
	{ NOT _ NotExpr #Not } / EqExpr

NOT = 'not' !W / '!' / '！'

EqExpr =
	SumExpr (left:^ { name: { EQ #Name } _ right: SumExpr #Infix })*

EQ =
	/ '==' '='? / '＝＝' 
	/ '!=' '='? / '！＝' / '≠'
	/ '<=' !'=' / '＜＝' / '≦'
	/ '>=' !'=' / '＞＝' / '≧'
	/ '<'  !'<' / '＜' !'＜'
	/ '>'  !'>' / '＞' !'＞'
    / '=' !'='  / '＝' !'＝'
    / ':=' !'='
    / ('not' !W _)? 'in' !W
    / 'is' !W (_ 'not' !W)?

SumExpr =
	ProdExpr (left:^ { name: { SUM #Name } _ right: ProdExpr #Infix })*

SUM = [+\-|＋ー｜]

ProdExpr =
	PowExpr (left:^ { name: { PROD #Name } _ right: PowExpr #Infix })*

PROD =
    / '//' / '<<' / '>>' / '／／' / '＜＜' / '＞＞'
	/ [*/%^&＊・／％＾＆×÷]

PowExpr = UnaryExpr (left:^ { name: { '**' #Name } _ right: UnaryExpr #Infix })*

UnaryExpr
	= { name: {PRE #Name } _ expr: UnaryExpr #Unary }
    / SuffixExpr

PRE = [+\-~＋ー〜]

SuffixExpr =
	Primary (
	    recv:^ { "." name: Name "(" params: Arguments __ ")" #MethodExpr }
	    / recv:^ { "." name: Name #GetExpr }
	    / name:^ { "(" params: Arguments __ ")"  #ApplyExpr }
        / recv:^ { "[" (left: Expression)? ":" (right: Expression)? "]" #Slice }
	    / recv:^ { "[" index: Expression "]" #IndexExpr }
	)*

Arguments = {
	( !(NAME _ '=') Expression)? 
    ( "," __ !(NAME _ '=') Expression )*
    (ListArgument/NamedArguments)?
    #Arguments
}

ListArgument = {
    '*' _ Expression
    #ListArgument
}

NamedArguments = {
    ("," __ )?
    NamedArgument ( "," __ NamedArgument )*
    #Data
}

NamedArgument = {
    name: Name
    "=" 
    value: Expression
    #KeyValue
}

Primary =
    / GroupExpr
    / ListExpr
    / DataExpr
    / Constant
    / Name

GroupExpr = { "(" Expression ("," __ Expression)*  __ ")" #Tuple }

ListExpr = { "[" (Expression ("," __ Expression)* )? ","?  __ "]" #List }

DataExpr = { "{" (KeyValue ("," __ KeyValue)*)? ","? __ "}" #Data }

//DELIM = [.:+\-*/%<>=!(){}[\],\n]

KeyValue = {
	name: (Name/StringExpr/CharExpr)
	":"
	value: Expression
	#KeyValue
}

/* Name, Identifier */

Name = 
    / Identifier 
    / Defined
    / UIdentifier

NAME = [A-Za-z_] W*

Identifier = {
    NAME
    #Name
} _

Defined = '「' { (!'」' .)+ #Name } '」'

UIdentifier = {
    (KATA / KANJI / HIRA / '_')+ W*
    #UName
} _

W = [A-Za-z0-9_]

/* Literal */

Constant =
	/ StringExpr
	/ CharExpr
	/ Number

StringExpr = 
    / { '"' STRING* '"' #QString } _
    / DQ { ZSTRING* #ZString } DQ _

CharExpr = 
    / { '\'' CHAR* '\'' #QString } _
    / SQ {  ZCHAR* #ZChar } SQ _

SQ = ['’‘＇]
DQ = ["”“＂]
STRING = ESCAPE / ![\"\n\\] .
CHAR   = ESCAPE / !['\n\\] .
ZSTRING = ESCAPE / !DQ ![\n\\] .
ZCHAR   = ESCAPE / !SQ ![\n\\] .

ESCAPE =
	/ '\\' ['\"\\bfnrt]
	/ '\\' [0-3] [0-7] [0-7]
  / '\\' [0-7] [0-7]
  / '\\' [0-7]
	/ '\\' [uU] HEX HEX HEX HEX

/* Number,Unit */

Number = FloatExpr / IntExpr

IntExpr = {
	(HEXADECIMAL / BINARY / DECIMAL )
	#Int
} _

DECIMAL = !'_' DIGIT ( DIGIT )*
HEXADECIMAL = '0' [xX] HEX ( '_'* HEX )*
BINARY = '0' [bB] [01] ( '_'* [01] )*
DIGIT = [0-9０-９_]
HEX = [a-fA-F0-9]
LONG_SUFFIX = [lL]

FloatExpr = {
	FLOAT #Double
} _

FLOAT = !'_' (
	FRACTION EXPONENT? / DIGIT+ EXPONENT
)

FRACTION =
	/ DIGIT* "." !'_' DIGIT+
    / DIGIT DIGIT* "." !'.'

EXPONENT =
	[eE] [+\-]? !'_' DIGIT+


/* character */

EOF          = !.
LF           = '\n' / EOF
S            = [ \t\u200B\v\r　]

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / '\n' / BLOCKCOMMENT / LINECOMMENT )*
SPC          = ( S / BLOCKCOMMENT / LINECOMMENT )+

BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
LINECOMMENT  = [#＃] ( !LF . )*

//EOS = [。．.\n]? EOF
TEN = [、，,：　 \n]
KANJI = [㐀-䶵一-龠々〇〻ーご]
KATA = [ァ-ヶー・]
HIRA = [ぁ-ん]
NONHIRA = [㐀-䶵一-龠々〇〻ーごァ-ヶー・] 
NONHIRA2 = (!HIRA !TEN ![()（）0-9A-Za-z] .)
ALPHA = [a-zA-Zａ-ｚＡ-Ｚ]
NUM = [\.,0-9０-９一二三四五六七八九十百千万億兆京垓秭穰溝澗正載極]
SYMBOL = [^＾~〜\-ー_＿!！?？#＃$＄&＆=＝@＠*＊+＋/・]
CMD = [！!]


